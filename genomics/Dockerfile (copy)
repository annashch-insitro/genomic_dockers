# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
ARG PARENT_DOCKER
FROM "$PARENT_DOCKER"

ENV DEBIAN_FRONTEND=noninteractive \
	LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8 \
    BASH_ENV=/etc/profile \
    SHELL=/bin/bash \
    MRO_VERSION=4.0.2 \
    R_HOME=/opt/microsoft/ropen/$MRO_VERSION/lib64/R \
    PATH=/opt/conda/bin:$PATH
    CONDARC=/opt/conda/.condarc \
	CONDA_DIR=/opt/conda \    
    NB_USER=$NB_USER \
    NB_UID=$NB_UID \
    NB_GID=$NB_GID \
    HOME=/home/$NB_USER

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ARG NB_USER="docker"
ARG NB_UID="1000"
ARG NB_GID="1000"

COPY fix-permissions /usr/local/bin/fix-permissions
RUN chmod a+rx /usr/local/bin/fix-permissions
RUN echo "auth requisite pam_deny.so" >> /etc/pam.d/su && \
    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \
    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \
    useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
    chmod g+w /etc/passwd && \
    fix-permissions $HOME    
    	
	
RUN echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen \
	&& apt-get update && apt-get install -y locales \
	&& locale-gen en_US.utf8 \
	&& /usr/sbin/update-locale LANG=en_US.UTF-8


## Install some useful tools and dependencies for MRO
RUN apt-get update \
	&& apt-get install -y --no-install-recommends \
		ca-certificates \
		curl \
        wget \		
		# needed on Ubuntu 20.04
		libtinfo5 \
		# MRO dependencies that don't sort themselves out on their own:
		less \
		libgomp1 \
		libpango-1.0-0 \
		libxt6 \
		libsm6 \
		# Needed for making C/C++ packages:
		make \
		cmake \
        automake \
		g++ \
        git \
        gfortran \
		build-essential \
		# misc libs
        libpq-dev \
        libffi-dev \
        libxrender1 \		
        libtool \
        libboost-program-options-dev \
        libcurl4-openssl-dev \
        libxml2-dev \
        libssl-dev \
		# extras
		locate \
		mc \
		vim \
	&& rm -rf /var/lib/apt/lists/*  

## Donwload and install MRO & MKL
COPY files/Rprofile.site $R_HOME/etc/Rprofile.site
WORKDIR /home/docker
RUN curl -LO -# https://mran.blob.core.windows.net/install/mro/$MRO_VERSION/Ubuntu/microsoft-r-open-$MRO_VERSION.tar.gz \
	&& tar -xzf microsoft-r-open-$MRO_VERSION.tar.gz\
	&& dpkg --install microsoft-r-open/deb/microsoft-r-open-mro-$MRO_VERSION.deb \
    && dpkg --install microsoft-r-open/deb/microsoft-r-open-mkl-$MRO_VERSION.deb \
    && rm microsoft-r-open-*.tar.gz \
	&& rm -r microsoft-r-open

# Install MiniConda
COPY files/environment.yml /tmp/environment.yml
WORKDIR /home/docker
RUN curl -LO -# https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && /bin/bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda \
    && rm Miniconda3-latest-Linux-x86_64.sh \ 
    && conda update -y conda \
    && conda env update -f /tmp/environment.yml -n base \
    && conda clean --all -y \
    && rm -rf ~/.cache/pip

RUN echo "auth requisite pam_deny.so" >> /etc/pam.d/su && \
    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \
    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \
    useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
    mkdir -p $CONDA_DIR && \
    chown $NB_USER:$NB_GID $CONDA_DIR && \
    chmod g+w /etc/passwd && \
    fix-permissions $HOME && \
    fix-permissions $CONDA_DIR


# Enable prompt color in the skeleton .bashrc before creating the default NB_USER
# hadolint ignore=SC2016
RUN sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc && \
   # Add call to conda init script see https://stackoverflow.com/a/58081608/4413446
   
   

# Install IRKernel
COPY files/install_IRKernel.R /tmp
RUN Rscript /tmp/install_IRKernel.R


EXPOSE 8888

# Configure container startup
COPY files/start/* /usr/local/bin/
COPY files/jupyter_notebook_config.py /etc/jupyter/
ENTRYPOINT ["tini", "-g", "--"]
CMD ["start-notebook.sh"]


